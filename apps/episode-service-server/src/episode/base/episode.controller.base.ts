/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EpisodeService } from "../episode.service";
import { EpisodeCreateInput } from "./EpisodeCreateInput";
import { Episode } from "./Episode";
import { EpisodeFindManyArgs } from "./EpisodeFindManyArgs";
import { EpisodeWhereUniqueInput } from "./EpisodeWhereUniqueInput";
import { EpisodeUpdateInput } from "./EpisodeUpdateInput";

export class EpisodeControllerBase {
  constructor(protected readonly service: EpisodeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Episode })
  async createEpisode(
    @common.Body() data: EpisodeCreateInput
  ): Promise<Episode> {
    return await this.service.createEpisode({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        liveFrom: true,
        speakers: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Episode] })
  @ApiNestedQuery(EpisodeFindManyArgs)
  async episodes(@common.Req() request: Request): Promise<Episode[]> {
    const args = plainToClass(EpisodeFindManyArgs, request.query);
    return this.service.episodes({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        liveFrom: true,
        speakers: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Episode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async episode(
    @common.Param() params: EpisodeWhereUniqueInput
  ): Promise<Episode | null> {
    const result = await this.service.episode({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        liveFrom: true,
        speakers: true,
        title: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Episode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEpisode(
    @common.Param() params: EpisodeWhereUniqueInput,
    @common.Body() data: EpisodeUpdateInput
  ): Promise<Episode | null> {
    try {
      return await this.service.updateEpisode({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          liveFrom: true,
          speakers: true,
          title: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Episode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEpisode(
    @common.Param() params: EpisodeWhereUniqueInput
  ): Promise<Episode | null> {
    try {
      return await this.service.deleteEpisode({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          liveFrom: true,
          speakers: true,
          title: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/get-filtered-episodes")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetFilteredEpisodes(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetFilteredEpisodes(body);
  }

  @common.Get("/episodes-list")
  @swagger.ApiOkResponse({
    type: Episode,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListEpisodes(
    @common.Body()
    body: string
  ): Promise<Episode[]> {
    return this.service.ListEpisodes(body);
  }
}
