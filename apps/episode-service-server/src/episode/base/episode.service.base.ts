/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Episode as PrismaEpisode } from "@prisma/client";
import { Episode } from "./Episode";

export class EpisodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EpisodeCountArgs, "select">): Promise<number> {
    return this.prisma.episode.count(args);
  }

  async episodes<T extends Prisma.EpisodeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EpisodeFindManyArgs>
  ): Promise<PrismaEpisode[]> {
    return this.prisma.episode.findMany<Prisma.EpisodeFindManyArgs>(args);
  }
  async episode<T extends Prisma.EpisodeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EpisodeFindUniqueArgs>
  ): Promise<PrismaEpisode | null> {
    return this.prisma.episode.findUnique(args);
  }
  async createEpisode<T extends Prisma.EpisodeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EpisodeCreateArgs>
  ): Promise<PrismaEpisode> {
    return this.prisma.episode.create<T>(args);
  }
  async updateEpisode<T extends Prisma.EpisodeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EpisodeUpdateArgs>
  ): Promise<PrismaEpisode> {
    return this.prisma.episode.update<T>(args);
  }
  async deleteEpisode<T extends Prisma.EpisodeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EpisodeDeleteArgs>
  ): Promise<PrismaEpisode> {
    return this.prisma.episode.delete(args);
  }
  async GetFilteredEpisodes(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ListEpisodes(args: string): Promise<Episode[]> {
    throw new Error("Not implemented");
  }
}
