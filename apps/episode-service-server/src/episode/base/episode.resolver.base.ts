/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Episode } from "./Episode";
import { EpisodeCountArgs } from "./EpisodeCountArgs";
import { EpisodeFindManyArgs } from "./EpisodeFindManyArgs";
import { EpisodeFindUniqueArgs } from "./EpisodeFindUniqueArgs";
import { CreateEpisodeArgs } from "./CreateEpisodeArgs";
import { UpdateEpisodeArgs } from "./UpdateEpisodeArgs";
import { DeleteEpisodeArgs } from "./DeleteEpisodeArgs";
import { EpisodeService } from "../episode.service";
@graphql.Resolver(() => Episode)
export class EpisodeResolverBase {
  constructor(protected readonly service: EpisodeService) {}

  async _episodesMeta(
    @graphql.Args() args: EpisodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Episode])
  async episodes(
    @graphql.Args() args: EpisodeFindManyArgs
  ): Promise<Episode[]> {
    return this.service.episodes(args);
  }

  @graphql.Query(() => Episode, { nullable: true })
  async episode(
    @graphql.Args() args: EpisodeFindUniqueArgs
  ): Promise<Episode | null> {
    const result = await this.service.episode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Episode)
  async createEpisode(
    @graphql.Args() args: CreateEpisodeArgs
  ): Promise<Episode> {
    return await this.service.createEpisode({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Episode)
  async updateEpisode(
    @graphql.Args() args: UpdateEpisodeArgs
  ): Promise<Episode | null> {
    try {
      return await this.service.updateEpisode({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Episode)
  async deleteEpisode(
    @graphql.Args() args: DeleteEpisodeArgs
  ): Promise<Episode | null> {
    try {
      return await this.service.deleteEpisode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async GetFilteredEpisodes(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetFilteredEpisodes(args);
  }

  @graphql.Query(() => [Episode])
  async ListEpisodes(
    @graphql.Args()
    args: string
  ): Promise<Episode[]> {
    return this.service.ListEpisodes(args);
  }
}
